=begin
#Tradenity API

#Tradenity eCommerce Rest API

Contact: support@tradenity.com
Generated by: https://github.com/tradenity

=end

# Common files
require 'tradenity/token_holder'
require 'tradenity/api_client'
require 'tradenity/api_error'
require 'tradenity/version'
require 'tradenity/configuration'
require 'tradenity/exceptions'

# Rails
require 'tradenity/rails/railtie' if defined?(Rails)

# Models
require 'tradenity/resources/utils.rb'
require 'tradenity/resources/paging.rb'
require 'tradenity/resources/address'
require 'tradenity/resources/braintree_gateway'
require 'tradenity/resources/brand'
require 'tradenity/resources/cancel_operation'
require 'tradenity/resources/cart_settings'
require 'tradenity/resources/cash_on_delivery_payment'
require 'tradenity/resources/category'
require 'tradenity/resources/collection'
require 'tradenity/resources/contact_info'
require 'tradenity/resources/countries_geo_zone'
require 'tradenity/resources/country'
require 'tradenity/resources/coupon'
require 'tradenity/resources/credit_card_payment'
require 'tradenity/resources/currency'
require 'tradenity/resources/customer'
require 'tradenity/resources/customer_group'
require 'tradenity/resources/dimensions'
require 'tradenity/resources/discount_coupon'
require 'tradenity/resources/discount_promotion'
require 'tradenity/resources/fixed_rate_shipping'
require 'tradenity/resources/free_item_coupon'
require 'tradenity/resources/free_shipping'
require 'tradenity/resources/free_shipping_coupon'
require 'tradenity/resources/free_shipping_promotion'
require 'tradenity/resources/gateway'
require 'tradenity/resources/general_settings'
require 'tradenity/resources/geo_zone'
require 'tradenity/resources/instance_meta'
require 'tradenity/resources/inventory_settings'
require 'tradenity/resources/items_selector'
require 'tradenity/resources/line_item'
require 'tradenity/resources/mail_server_settings'
require 'tradenity/resources/measurement_settings'
require 'tradenity/resources/option'
require 'tradenity/resources/option_set'
require 'tradenity/resources/option_value'
require 'tradenity/resources/order'
require 'tradenity/resources/order_line_item'
require 'tradenity/resources/payment'
require 'tradenity/resources/payment_card'
require 'tradenity/resources/payment_settings'
require 'tradenity/resources/payment_source'
require 'tradenity/resources/payment_token'
require 'tradenity/resources/payment_transaction'
require 'tradenity/resources/photo'
require 'tradenity/resources/product'
require 'tradenity/resources/promotion'
require 'tradenity/resources/refund_operation'
require 'tradenity/resources/refund_transaction'
require 'tradenity/resources/return_line_item'
require 'tradenity/resources/return_operation'
require 'tradenity/resources/return_settings'
require 'tradenity/resources/shipping_method'
require 'tradenity/resources/shopping_cart'
require 'tradenity/resources/state'
require 'tradenity/resources/states_geo_zone'
require 'tradenity/resources/store_credit'
require 'tradenity/resources/store_credit_payment'
require 'tradenity/resources/store_credit_transaction'
require 'tradenity/resources/store_profile'
require 'tradenity/resources/stripe_gateway'
require 'tradenity/resources/table_rate_rule'
require 'tradenity/resources/table_rate_shipping'
require 'tradenity/resources/tax_class'
require 'tradenity/resources/tax_rate'
require 'tradenity/resources/tax_settings'
require 'tradenity/resources/test_gateway'
require 'tradenity/resources/transaction'
require 'tradenity/resources/variant'
require 'tradenity/resources/web_hooks'
require 'tradenity/resources/weight'
require 'tradenity/resources/wish_list'
require 'tradenity/resources/zip_codes_geo_zone'



module Tradenity
  class << self
    # Customize default settings for the SDK using block.
    #   Tradenity.configure do |config|
    #     config.username = "xxx"
    #     config.password = "xxx"
    #   end
    # If no block given, return the default Configuration object.
    def configure
      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end
  end
end
